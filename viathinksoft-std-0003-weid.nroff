.\" This document was created using "Nroff Internet Draft Editor"
.\" Note that a hotfix is required to use this program after 1st January 2020:
.\" https://misc.daniel-marschall.de/patches/nroffedit/
.\"
.\" Alternative, you can compile this document on Linux, using the following command:
.\"        nroff -T ascii -ms viathinksoft-std-0003-weid.nroff | ./fix_formfeed.pl > viathinksoft-std-0003-weid.txt
.\" Note that "-ms" only works if the package "groff" is installed.
.\" fix.pl needs to be executed to replace FORMFEED.
.\" Note that the Linux command does not auto-generate the Table of Contents, since this is a NroffEdit feature!
.\"
.\" Note about section titles: According to RFC7322, the section capitalization should be Chicago Manual of Style
.\" Use this tool: https://titlecaseconverter.com/ 
.\"
.\" These values are required for my Debian Linux system (nroff) so that it outputs the same lines like NroffEdit
.pl 95n
.nr HM 6n
.nr FM 8n
.\" Page length
.\".pl 10.0i
.\" Page offset
.po 0
.\" Length of line
.ll 7.2i
.\" Length of title
.lt 7.2i
.\" Line Length (ms macro)
.nr LL 7.2i
.\" Title line length
.nr LT 7.2i
.\" Left footer text
.ds LF Marschall / Wehowski
.\" Right footer text. "FORMFEED" will be replaced by a post-processing script.
.ds RF FORMFEED[Page %]
.\" Left header text
.ds LH VTS/WF STD. 3
.\" Right header text
.ds RH 5 January 2025
.\" Center header text
.ds CH Wehowski Identifier (WEID)
.\" Center footer text
.ds CF 
.\" Hyphenation mode set to 0
.hy 0
.\" Disable hyphenation
.nh
.\" Adjust text left
.ad l
.\" Set indent (can be overridden for a single line using .ti = temporary indent)
.in 0

.nf
.tl 'VIATHINKSOFT/WEBFAN''D. Marschall | M. Wehowski'
.tl 'SPECIFICATION No. 3''ViaThinkSoft |      Webfan'
.tl 'First Draft: 2011''5 January 2025'
.fi

.\" Note. The ".tl" directive is used to generate the leading header 
.\" in Internet drafts. The information specified after ".tl" provides
.\" left, center and right components of a line separated by the ' character
.\" in the following manner:
.\" 
.\"  .tl '<left component>'<center component>'<right component>'
.\"
.\" Only the left and right components are used in Internet-draft headers
.\" This and other comments in this template can safely be deleted.

.ce 3
=== Wehowski Identifier (WEID) ===
.fi
.in 3

.ti 0
Abstract

This document describes the Wehowski Identifier (WEID) scheme, which is an alternative notation of Object Identifiers (OIDs).

.ti 0
Identification of this Document

.in 3
.nf
Revision:  2025-01-05 (Spec Change 13 as of 2025-01-01)
State:     In Force
Filename:  viathinksoft-std-0003-weid.txt
URN:       urn:x-viathinksoft:std:0003:2025-01-05
OID:       1.3.6.1.4.1.37553.8.1.8.1.6
           { iso(1) identified-organization(3) dod(6) internet(1)
             private(4) enterprise(1) frdlweb(37553) weid(8) org(1)
             webfan(8) technical-specifications(1) weid-spec(6) }
WEID:      weid:1-8-1-6-2
IETF/RFC:  (None)
.fi

.ti 0
Attachments

(None)

.ti 0
Copyright Notice

Copyright (c) 2011-2025 ViaThinkSoft, Webfan and the persons identified as the
document authors.  All rights reserved.

Licensed under the terms of the Apache 2.0 License.
.br
.\" These values are required for my Debian Linux system (nroff) so that it outputs the same lines like NroffEdit
.nr HM 8n
.nr FM 8n
.bp
.pl 96n
.\" \# TD4  -- Set TOC depth by altering this value (TD5 = depth 5)
.\" \# TOC  -- Beginning of auto updated Table of Contents
.in 0
Table of Contents

.nf
   1  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1  Terminology . . . . . . . . . . . . . . . . . . . . . . . .  3
   2  Namespaces  . . . . . . . . . . . . . . . . . . . . . . . . . .  3
     2.1  Namespace "weid:" (Classic WEID, Class C) . . . . . . . . .  4
     2.2  Sub-Namespace "weid:pen:" (PEN based, Class B)  . . . . . .  4
     2.3  Sub-Namespace "weid:root:" (OID based, Class A) . . . . . .  4
     2.4  Sub-Namespace "weid:<DomainName>:" (DNS based, Class D) . .  4
     2.5  Sub-Namespace "weid:uuid:<UUID>:" (UUID based, Class B) . .  5
     2.6  Sub-Namespace "weid:x-<Name>:" for Proprietary Namespaces .  5
   3  Construction of a WEID  . . . . . . . . . . . . . . . . . . . .  6
     3.1  Construction of a Regular WEID  . . . . . . . . . . . . . .  6
     3.2  Construction of a DNS based (Class D) WEID  . . . . . . . .  7
     3.3  Construction of an UUID based (Class B) WEID  . . . . . . .  8
     3.4  Construction of a Custom WEID (Proprietary Namespaces)  . .  9
   4  Notation  . . . . . . . . . . . . . . . . . . . . . . . . . . .  9
     4.1  Recommendations . . . . . . . . . . . . . . . . . . . . . .  9
     4.2  Wildcard Notation (No Check Digit)  . . . . . . . . . . . .  9
     4.3  Uniform Resource Names (URN) Namespace Notation . . . . . .  9
   5  Additional Notes  . . . . . . . . . . . . . . . . . . . . . . .  9
   6  Security Considerations . . . . . . . . . . . . . . . . . . . . 10
   7  RA Considerations . . . . . . . . . . . . . . . . . . . . . . . 10
   8  References  . . . . . . . . . . . . . . . . . . . . . . . . . . 11
     8.1  Normative References  . . . . . . . . . . . . . . . . . . . 11
     8.2  Informative References  . . . . . . . . . . . . . . . . . . 11
   Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . . . 12
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 12
.fi
.in 3

.\" \# ETC -- End of auto updated Table of Contents

.bp
.ti 0
1  Introduction

An Object Identifier (OID) is an extensively used identification mechanism jointly developed by ITU-T and ISO/IEC for naming any type of object, concept, or "thing" with a globally unambiguous name.  More information about OIDs can be found at www.oid-info.com.

To get an OID in accordance with Recommendation ITU-T X.600 assigned, you need to find a Registration Authority that assigns you an OID.  You can obtain an OID as WEID and manage your own arc, e.g. by:

- IANA Private Enterprise Numbers (PEN)
.br
- Free OID by ViaThinkSoft
.br
- "Public" OID by Frdlweb

There are three well-known notations for OIDs:

.in 6
.nf
Dot notation:      2.999
ASN.1 notation:    {joint-iso-itu-t(2) example(999)}
OID-IRI notation:  /Joint-ISO-ITU-T/Example
.fi
.in 3

WEID (WEhowski IDentifier) is another notation for OIDs, developed by Till Wehowski and Daniel Marschall:

.in 6
.nf
WEID notation:     weid:root:2-RR-2
.fi
.in 3

In the initial version of the WEID specification of 2011, only OIDs below the WEID root arc 1.3.6.1.4.1.37553.8 could be used.  In a later definition by Daniel Marschall, any existing OID can be written in WEID notation, by defining sub-namespaces.

.ti 0
1.1  Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP\014 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.

For WEID, the names "Class A", "Class B", "Class C", and "Class D" refer to the property of subsets. Class D is a subset of Class C, which is a subset of Class B, etc.

.in 3
.ti 0
2  Namespaces

Sub-namespaces are defined by the WEID consortium (ViaThinkSoft and WebFan) in a Specification Change.  The registry of sub-namespaces (URN prefixes) has currently the following entries:
.bp
.ti 0
2.1  Namespace "weid:" (Classic WEID, Class C)

The root OID is "1.3.6.1.4.1.37553.8".

Example: OID "1.3.6.1.4.1.37553.8.32488192274" can be written as "weid:EXAMPLE-3" (3 is the check digit) or "weid:EXAMPLE-?" (check digit wildcard).

The registration of WEID Alphanumeric OIDs beneath this arc is managed by Webfan.de in order of FRDLWEB.  You can assign a Private WEID by Frdlweb here: https://registry.frdl.de/?goto=com.frdlweb.freeweid

.ti 0
2.2  Sub-Namespace "weid:pen:" (PEN based, Class B)

The root OID is "1.3.6.1.4.1".

Example: OID "1.3.6.1.4.1.37476.9999" can be written as "weid:pen:SX0-7PR-6" (6 is the check digit) or "weid:pen:SX0-7PR-?" (check digit wildcard).

The registration of Private Enterprise Numbers (PEN) is managed by IANA.  You can register a PEN here: https://pen.iana.org/pen/PenApplication.page

.ti 0
2.3  Sub-Namespace "weid:root:" (OID based, Class A)

The root OID is the root of the OID tree.

Example: OID "2.999" can be written as "weid:root:2-RR-2" (2 is the check digit) or "weid:root:2-RR-?" (check digit wildcard).

.ti 0
2.4  Sub-Namespace "weid:<DomainName>:" (DNS based, Class D)

All WEID sub-namespaces containing at least one dot (.) in the second URN part are treated as domain names.

The notation "weid:example.com:ABC-DEF-?" is equal to the Class C WEID "weid:9-DNS-COM-EXAMPLE-ABC-DEF-?".  The check digit is equal, because it depends on the absolute path rather than the visible arcs.

The resulting WEID is called Domain-WEID or "Class D" WEID.

TLD-Only domains are not allowed for the purpose of forming a Domain-WEID.

Only ASCII notations can be used; therefore the Punycode notation MUST be used for Unicode domain names.

A Domain-WEID can be converted to Class A/B/C WEID, but the reverse conversion is ambiguous ("where does the domain name end and where does the identifier part start?")

.ti 0
2.5  Sub-Namespace "weid:uuid:<UUID>:" (UUID based, Class B)
 
The root OID for the WEID "weid:uuid:<Base-16-UUID>:" is the UUID-OID which is "2.25.<Base-10-UUID>".
 
As an example, this Class B UUID-WEID:
weid:uuid:1efc604b-dca1-6ad8-b7ac-4cf95d479851:HALLO-WELT-? (Base 16 UUID + Base 36 WEID arcs)

is the same as this Class A WEID:
weid:root:2-P-1U1FHP8PBAM0UTK1O9S7G1H01-HALLO-WELT-? (Base 36 UUID + Base 36 WEID arcs)

which is the same as this OID:
oid:2.25.41187251803614235665922727894359447633.29048028.1511921 (Base 10 UUID + Base 10 OID arcs)

Please note that unlike "weid:pen:?", the identifier "weid:uuid:?" is NOT a valid WEID.  "weid:uuid:" MUST BE used with a valid UUID only.  The UUID is a mandatory part of the namespace.

.ti 0
2.6  Sub-Namespace "weid:x-<Name>:" for Proprietary Namespaces

For Proprietary WEID Namespaces, the second URN part must begin with "x-", for example, "weid:x-contoso:ABC-DEF-?" could be a WEID defined by Contoso Ltd.

As usual for WEID, the namespace is case insensitive.

To avoid confusion with Domain-WEID, the sub-namespace must not contain a dot (.).

The vendor has complete control over the namespace and can define the behavior.  However, it is recommended to make use of Base36 and the weLuhn check digit.

Since the vendor specifies the namespace, it is up to the vendor if they allow the mapping of their WEID-Namespace to the OID-Tree.  In comparison to class A/B/C/D WEID which are 100% OID compatible, custom / vendor-specific WEIDs might not be OID-compatible at all.

Currently, the following custom namespaces are known:

.in 7
.ti 3
(1) weid:x-frdl:[Base36_NS]-[SubNS]:[Base36_ID]-[CheckDigit] to be defined/implemented by Frdlweb.
.in 3

If you know more namespaces, or if you are the author of a custom namespace, please let us know.

.ti 0
3  Construction of a WEID

.ti 0
3.1  Construction of a Regular WEID

The construction of a regular WEID (class A/B/C, but not DNS, UUID, or Custom WEID) is demonstrated with the example OID "2.999":

.in 7
.ti 3
(1) The numeric arcs (e.g. "2" and "999") are converted from base 10 to base 36, so the arcs become "2" and "RR".
.in 3

.in 7
.ti 3
(2) The arcs are separated by a hyphen -, so we have now "2-RR".
.in 3

.in 7
.ti 3
(3) A Luhn-based check digit (called WeLuhn) is added, preceded by a hyphen.  Alternatively, you can replace the check digit with the wildcard symbol "?" (see section 4.2).
.in 3

The WeLuhn check digit is calculated as follows:

.in 9
.ti 3
(3.1) First, we take the OID in dot notation (e.g. "2.999")
.in 3

.in 9
.ti 3
(3.2) The arcs will be converted from base 10 to base 36, so we have "2-RR".  Padding zeros must not be present and need to be stripped.
.in 3

.in 9
.ti 3
(3.3) The hyphens are removed, so we now have "2RR".
.in 3

.in 9
.ti 3
(3.4) "A" will be replaced with 10, "B" will be replaced with "11", etc., so we now have "22727".
.in 3

This number is the payload for the standard Luhn algorithm which works as follows:

.in 9
.ti 3
(3.5) Start from the rightmost digit.  Moving left, double the value of every second digit (including the rightmost digit).
.in 3

.in 9
.ti 3
(3.6) Sum the digits of the resulting value in each position.
.in 3

.in 9
.ti 3
(3.7) Sum the resulting values from all positions, "s".
.in 3

.in 9
.ti 3
(3.8) The check digit is calculated by "((10-s mod 10) mod 10)".  In our case, the Luhn check digit is "2".
.in 3
.bp
.in 7
.ti 3
(4) Choose the (sub-)namespace that is closest to the OID your are describing:

- If the OID is inside "1.3.6.1.4.1.37553.8", then replace the prefix "1-3-6-1-4-1-SZ5-8-" with "weid:" (Class C WEID).

- Otherwise, if the OID is inside "1.3.6.1.4.1", then replace the prefix "1-3-6-1-4-1-" with "weid:pen:" (Class B WEID).

- Otherwise, prepend "weid:root:" (Class A WEID).
.in 3

In our example, we choose "weid:root:" and our final WEID notation for OID "2.999" is "weid:root:2-RR-2", which is a Class A WEID.


.ti 0
3.2  Construction of a DNS based (Class D) WEID

The construction of a DNS/Domain WEID is demonstrated with the example domain "example.com" and the payload "ABC-DEF":

.in 7
.ti 3
(1) Prepend "weid:" in front of the domain name, and append a colon.  This gives "weid:example.com:".
.in 3

.in 7
.ti 3
(2) If you want to add a payload, then append a the payload together with a hyphen.  This gives "weid:example.com:ABC-DEF-".
.in 3

.in 7
.ti 3
(3) Add a question-mark to have a wildcard check digit (e.g. "weid:example.com:ABC-DEF-?"), as defined in section 4.2, or calculate the correct check digit and add it.  In the latter case you will receive the result: "weid:example.com:ABC-DEF-8".
.in 3

To calculate the check digit:

.in 9
.ti 3
(3.1) Reverse the order of the domain parts, i.e. "example.com" becomes "com.example".
.in 3

.in 9
.ti 3
(3.2) Prepend "1-3-6-1-4-1-SZ5-8-9-DNS-".  This gives "1-3-6-1-4-1-SZ5-8-9-DNS-com.example".
.in 3

.in 9
.ti 3
(3.3) If you want to add a payload, then add a hyphen and the payload.  This results in "1-3-6-1-4-1-SZ5-8-9-DNS-com.example-ABC-DEF"
.in 3

.in 9
.ti 3
(3.4) Remove the hyphens and dots, and convert everything to upper-case.  This gives "136141SZ589DNSCOMEXAMPLEABCDEF".
.in 3

.in 9
.ti 3
(3.5) "A" will be replaced with 10, "B" will be replaced with "11", etc.
.in 3

.in 9
.ti 3
(3.6) The standard Luhn algorithm (see section 3.1) will be applied, which gives the check digit, in our example "8".
.in 3


.ti 0
3.3  Construction of an UUID based (Class B) WEID

The construction of a UUID WEID is demonstrated with the example UUID
"1efc604b-dca1-6ad8-b7ac-4cf95d479851" and the payload "HALLO-WELT".

.in 7
.ti 3
(1) Prepend "weid:uuid:" in front of the UUID, and append a colon.  This gives "weid:uuid:1efc604b-dca1-6ad8-b7ac-4cf95d479851:".
.in 3

.in 7
.ti 3
(2) If you want to add a payload, then append a the payload together with a hyphen.  This gives "weid:uuid:1efc604b-dca1-6ad8-b7ac-4cf95d479851:HALLO-WELT-".
.in 3

.in 7
.ti 3
(3) Add a question-mark to have a wildcard check digit (e.g. "weid:uuid:1efc604b-dca1-6ad8-b7ac-4cf95d479851:HALLO-WELT-?"), as defined in section 4.2, or calculate the correct check digit and add it.  In the latter case you will receive the result: "weid:uuid:1efc604b-dca1-6ad8-b7ac-4cf95d479851:HALLO-WELT-1".
.in 3

To calculate the check digit:

.in 9
.ti 3
(3.1) Convert the UUID to an UUID-OID (located in OID 2.25).  To do this, you need to convert the UUID from a base 16 number to a base 10 number, and then prepend "2.25.".  Example: "1efc604b-dca1-6ad8-b7ac-4cf95d479851" is equal to OID 2.25.41187251803614235665922727894359447633.
.in 3

.in 9
.ti 3
(3.2) Convert this UUID-OID to a WEID and remove the WEID check digit.  In our example "2.25.41187251803614235665922727894359447633" becomes "weid:root:2-P-1U1FHP8PBAM0UTK1O9S7G1H01-".
.in 3

.in 9
.ti 3
(3.3) If available, add the actual payload, in our example "HALLO-WELT".   This gives "weid:root:2-P-1U1FHP8PBAM0UTK1O9S7G1H01-HALLO-WELT"
.in 3

.in 9
.ti 3
(3.4) Remove "weid:root:" as well as the hyphens, and convert everything to upper-case.  This gives "2P1U1FHP8PBAM0UTK1O9S7G1H01HALLOWELT".
.in 3

.in 9
.ti 3
(3.5) "A" will be replaced with 10, "B" will be replaced with "11", etc.
.in 3

.in 9
.ti 3
(3.6) The standard Luhn algorithm (see section 3.1) will be applied, which gives the check digit, in our example "1".
.in 3


.ti 0
3.4  Construction of a Custom WEID (Proprietary Namespaces)

The construction of a Custom WEID is vendor specific and hence outside the scope of this specification.


.ti 0
4  Notation

.ti 0
4.1  Recommendations

The arcs in a WEID SHOULD be written in upper-case, but lowercase can be interpreted, too.

The URN namespace (weid:, weid:pen:, weid:root:, weid:uuid:) is case insensitive, but it is RECOMMENDED to write it in lowercase.

Padding with 0 characters is valid (e.g. weid:000EXAMPLE-3), but NOT RECOMMENDED.  The paddings do not count toward the WeLuhn check digit.

.ti 0
4.2  Wildcard Notation (No Check Digit)

An alternative syntax for WEID replaces the check digit with a wildcard in the form of a question mark symbol, for example, "weid:root:2-RR-?" instead of "weid:root:2-RR-2".  One useful scenario can be the documentation of incomplete/template WEIDs, e.g. "weid:pen:SX0-Something-?".  Another usage is converters (like our online converter) which can help you replace the wildcard with the correct check digit.

.ti 0
4.3  Uniform Resource Names (URN) Namespace Notation

In accordiance with [RFC 3406], the URN namespace of WEID is "urn:x-weid:" (whereas "x-" stands for an unregistered experimental URN). Hence, "weid:2-RR-2" can be written as "urn:x-weid:2-RR-2".

.ti 0
5  Additional Notes

Any WEID - except for Custom WEID - can be represented by an OID and vice-versa. Therefore, a WEID has all attributes of an OID (e.g. it can be used to generate a Version 5 SHA1 name-based UUID with the Namespace UUID "6ba7b812-9dad-11d1-80b4-00c04fd430c8" according to [RFC 4122]).

Please note that some clients handling OIDs cannot handle arcs that have a specific size.  Implementers of WEID strongly encourage allowing arbitrary length arcs (i.e. implementing BigInteger rather than 32-bit integers).

At www.weid.info you can find more information and announcements of changes.

The current version of the specification is 13, which is identified with the OID 1.3.6.1.4.1.37553.8.1.8.1.6.1.13 (weid:1-8-1-6-1-D-3).

.ti 0
6  Security Considerations

None.

.ti 0
7  RA Considerations

.nf
OID:   1.3.6.1.4.1.37553.8.1.8.1.6
WEID:  weid:1-8-1-6-2
ASN1:  { iso(1) identified-organization(3) dod(6) internet(1)
private(4) enterprise(1) frdlweb(37553) weid(8) org(1)
webfan(8) technical-specifications(1) weid-spec(6) }
IRI:   /.../weid/Organization/Webfan/1/6

Subordinates 1st level:

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1
ASN1:  { ... weid-spec-changes(1) }

Subordinates 2nd level:

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.1
ASN1:  { ... weid-spec-change-2013-6-27-1-identifier(1) }

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.2
ASN1:  { ... weid-spec-change-2013-6-27-2-weix-canceled-
and-replaced(2) }

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.3
ASN1:  { ... weid-spec-change-2013-6-27-3-rooting-url-
look-up-url-meaning-revision(3) }

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.4
ASN1:  { ... weid-spec-change-2013-0-1-commercial-repository(4) }

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.5
ASN1:  { ... weid-spec-change-2013-6-27-4-determine-seperator-
colon(5) }

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.6
ASN1:  { ... weid-spec-change-2013-10-2-camel-case-identifier(6) }
.bp
OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.7
ASN1:  { ... weid-spec-change-2013-10-2-thesaurus(7) }

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.8
ASN1:  { ... weid-spec-change-2021-12-8-marschall-indi-version(8) }

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.9
ASN1:  { ... weid-spec-change-2022-03-08-marschall-checksum-
wildcard(9) }

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.10
ASN1:  { ... weid-spec-change-2023-08-07-domain-weid(10) }

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.11
ASN1:  { ... weid-spec-change-2023-08-07-custom-namespace(11) }

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.12
ASN1:  { ... weid-spec-change-2024-09-09-urn(12) }

OID:   1.3.6.1.4.1.37553.8.1.8.1.6.1.13
ASN1:  { ... weid-spec-change-2025-01-01-uuid(13) }
.fi

.ti 0
8  References

.ti 0
8.1  Normative References
.in 14

.\" https://www.rfc-editor.org/refs/ref2119.txt
.ti 3
[RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate Requirement Levels", BCP\014, RFC\02119, DOI\010.17487/RFC2119, March\01997,
.br
<https://www.rfc-editor.org/info/rfc2119>.

\." https://www.rfc-editor.org/refs/ref3406.txt
.ti 3
[RFC3406]  Daigle, L., van Gulik, D., Iannella, R., and P. Faltstrom, "Uniform Resource Names (URN) Namespace Definition Mechanisms", RFC 3406, DOI 10.17487/RFC3406, October 2002,
.br
<https://www.rfc-editor.org/info/rfc3406>.

.in 3
.ti 0
8.2  Informative References
.in 14

\." https://www.rfc-editor.org/refs/ref4122.txt
.ti 3
[RFC4122]  Leach, P., Mealling, M., and R. Salz, "A Universally Unique IDentifier (UUID) URN Namespace", RFC\04122, DOI\010.17487/RFC4122, July\02005,
.br
<https://www.rfc-editor.org/info/rfc4122>.
.bp
.in 3
.ti 0
Acknowledgements
.in 3

I would like to thank Melanie Wehowski for her long time support in OIDplus and WEID projects.

Thanks to the authors of these free tools which did a very good job in validating various contents of this document:

This document was written in Nroff Internet Draft Editor by 3xA Security.
.br
https://aaa-sec.com/nroffedit/
.br
https://misc.daniel-marschall.de/patches/nroffedit/ ("year 2020" patch)

.ti 0
Authors' Addresses
.in 3

.nf
Daniel Marschall
Postfach 11 53
69243 Bammental
Germany

Email: daniel-marschall@viathinksoft.de
URI:   https://www.viathinksoft.com/
.fi
