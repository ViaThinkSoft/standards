.\" This document was created using "Nroff Internet Draft Editor"
.\" Note that a hotfix is required to use this program after 1st January 2020:
.\" https://misc.daniel-marschall.de/patches/nroffedit/
.\"
.\" Alternative, you can compile this document on Linux, using the following command:
.\"        nroff -T ascii -ms viathinksoft-std-0006-mha2.nroff | ./fix_formfeed.pl > viathinksoft-std-0006-mha2.txt
.\" Note that "-ms" only works if the package "groff" is installed.
.\" fix.pl needs to be executed to replace FORMFEED.
.\" Note that the Linux command does not auto-generate the Table of Contents, since this is a NroffEdit feature!
.\"
.\" Note about section titles: According to RFC7322, the section capitalization should be Chicago Manual of Style
.\" Use this tool: https://titlecaseconverter.com/ 
.\"
.\" These values are required for my Debian Linux system (nroff) so that it outputs the same lines like NroffEdit
.pl 95n
.nr HM 6n
.nr FM 8n
.\" Page length
.\".pl 10.0i
.\" Page offset
.po 0
.\" Length of line
.ll 7.2i
.\" Length of title
.lt 7.2i
.\" Line Length (ms macro)
.nr LL 7.2i
.\" Title line length
.nr LT 7.2i
.\" Left footer text
.ds LF Marschall
.\" Right footer text. "FORMFEED" will be replaced by a post-processing script.
.ds RF FORMFEED[Page %]
.\" Left header text
.ds LH VTS/WF STD. 6
.\" Right header text
.ds RH 4 September 2024
.\" Center header text
.ds CH ViaThinkSoft MHA2
.\" Center footer text
.ds CF 
.\" Hyphenation mode set to 0
.hy 0
.\" Disable hyphenation
.nh
.\" Adjust text left
.ad l
.\" Set indent (can be overridden for a single line using .ti = temporary indent)
.in 0

.nf
.tl 'VIATHINKSOFT/WEBFAN''D. Marschall'
.tl 'SPECIFICATION No. 6''ViaThinkSoft'
.tl 'First Draft: 2014''4 September 2024'
.fi

.\" Note. The ".tl" directive is used to generate the leading header 
.\" in Internet drafts. The information specified after ".tl" provides
.\" left, center and right components of a line separated by the ' character
.\" in the following manner:
.\" 
.\"  .tl '<left component>'<center component>'<right component>'
.\"
.\" Only the left and right components are used in Internet-draft headers
.\" This and other comments in this template can safely be deleted.

.ce 3
=== Marschall Hash 2 (MHA2) ===
.fi
.in 3

.ti 0
Abstract

This document describes the hash algorithm MHA2.

.ti 0
Identification of this Document

.in 3
.nf
Revision:  2024-09-04
State:     Deprecated
URL:       https://github.com/ViaThinkSoft/standards/blob/main/\\
           viathinksoft-std-0006-mha2.txt
URN:       urn:viathinksoft.de:std:0006:2024-09-04
OID:       1.3.6.1.4.1.37476.3.2.1.2
           { iso(1) identified-organization(3) dod(6) internet(1)
             private(4) enterprise(1) 37476 specifications(3)
             algorithm(2) hash(1) mha2(2) }
WEID:      weid:pen:SX0-3-2-1-2-9
IETF/RFC:  (None)
.fi

.ti 0
Attachments

Reference implementation in PHP:
https://github.com/danielmarschall/php_utils/blob/master/\\
vts_crypt.inc.php

.ti 0
Copyright Notice

Copyright (c) 2014-2024 ViaThinkSoft and the persons identified as the
document authors.  All rights reserved.

Licensed under the terms of the Apache 2.0 License.
.br
.\" These values are required for my Debian Linux system (nroff) so that it outputs the same lines like NroffEdit
.nr HM 8n
.nr FM 8n
.bp
.pl 96n
.\" \# TD4  -- Set TOC depth by altering this value (TD5 = depth 5)
.\" \# TOC  -- Beginning of auto updated Table of Contents
.in 0
Table of Contents

.nf
   1  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . .  3
     1.1  Terminology . . . . . . . . . . . . . . . . . . . . . . . .  3
   2  Definition  . . . . . . . . . . . . . . . . . . . . . . . . . .  3
     2.1  Example . . . . . . . . . . . . . . . . . . . . . . . . . .  4
   3  Notation  . . . . . . . . . . . . . . . . . . . . . . . . . . .  4
     3.1  Modular Crypt Format Notation . . . . . . . . . . . . . . .  4
     3.2  Heterogenous Systems Notation . . . . . . . . . . . . . . .  5
   4  Test Vectors  . . . . . . . . . . . . . . . . . . . . . . . . .  6
   5  Reference implementation  . . . . . . . . . . . . . . . . . . .  8
   6  Security Considerations . . . . . . . . . . . . . . . . . . . .  8
     6.1  Runtime complexity  . . . . . . . . . . . . . . . . . . . . 10
   7  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 10
   8  References  . . . . . . . . . . . . . . . . . . . . . . . . . . 10
     6.1  Normative References  . . . . . . . . . . . . . . . . . . . 10
     6.2  Informative References  . . . . . . . . . . . . . . . . . . 11
   Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . . . 11
   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . . 11
.fi
.in 3

.\" \# ETC -- End of auto updated Table of Contents

.bp
.ti 0
1  Introduction

MHA2 is a method to strengten a weak hash function, e.g. in case that the development environment or hardware does not allow using a new implementation of a modern hash variant like SHA256 or SHA3.

.ti 0
1.1  Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP\014 [RFC2119] [RFC8174] when, and only when, they appear in all capitals, as shown here.

.ti 0
2  Definition

.nf
MHA2(i,s,x) := A(i,s,x) xor B(i,s,x) xor C(i,s,x)

with:
	A(j,s,x) := j>=0: H(P & A(j-1, s, x) & x & s & Q)
		    j=-1: ''

	B(j,s,x) := j<=0: H(Q & s & x & B(j-1, s, x) & P)
		    j=-1: ''

	C(j,s,x) := H( (K&x&s)*(j+1) )

	K := 0x24 & 0x12 & 0x19 & 0x87
	P := 0x12 & 0x24 & 0x19 & 0x87
	Q := 0x19 & 0x87 & 0x12 & 0x24

where:

	i is the number of iterations, i <= 0.
	j is a number <= -1 .

	s is the salt.

	x is the input data.

	0xd is a single byte with the hexadecimal value d.

	H(z) is an existing hash function.

	All hash operations have a binary output;
	no string conversation is done.

	x*z are z repetitions (concatenations) of x.

	& is concatenation.
.fi

.ti 0
2.1  Example

.nf
- MHA2(1, '', x) = H(P & H(P&x&Q) & x & Q) xor
  H(Q & x & H(Q&x&P) & P) xor H(K&x&s & K&x&s)

- MHA2(1,  s, x) = H(P & H(P&x&s&Q) & x & s & Q)
  xor H(Q & s & x & H(Q&s&x&P) & P) xor H(K&x&s & K&x&s)
.fi

.ti 0
3  Notation

.ti 0
3.1  Modular Crypt Format Notation

Format of the MCF:

.nf
$<id>$<params>$<salt>$<hash>
.fi

<id> is 1.3.6.1.4.1.37476.3.2.1.1

<params> is a=<algo>,i=<iterations>

where <algo> is any valid hash algorithm (name scheme of PHP hash_algos() preferred), e.g.
.nf
- sha3-512
- sha3-384
- sha3-256
- sha3-224
- sha512
- sha512/256
- sha512/224
- sha384
- sha256
- sha224
- sha1
- md5
.fi

Not possible with MHA2 are these hashes (because they have a special salt-handling and output their own crypt format):
.nf
- bcrypt [Standardized crypt identifier 2, 2a, 2x, 2y]
- argon2i [Crypt identifier argon2i, not standardized]
- argon2id [Crypt identifier argon2i, not standardized]
.fi

<iterations> are the iterations.

Like most Crypt-hashes, <salt> and <hash> are Radix64 coded
without padding and with alphabet
'./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.
.bp
.ti 0
3.2  Heterogenous Systems Notation

The "heterogenous systems notation" (HNS) is DEPRECATED in favor of the modular crypt format notation!

<mha2-oid>$<base-hash>$<iterations>$<salt-base64>$<hash-base64>

-  <mha2-oid> is the OID for a MHA2 algorithm in its dot-notation without leading dot,
   which is 1.3.6.1.4.1.37476.3.2.1.2

   This OID has ASN.1 Notation:
   { iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1)
     37476 specification(3) algorithm(2) hash(1) mha2(2) }

-  <base-hash> should be an OID which represents the base hash ("H") algorithm used, in dot-notation.

   The following table shows the OIDs which have been assigned
   for exchange between heterogenous systems. If you want to use a different
   hash algorithm or a derivate of it, please define your own OID
   (you can use an UUID OID, get a free IANA PEN OID, or a free ViaThinkSoft OID),
   but please do not use this arc, since only ViaThinkSoft may maintain it.

.nf
   --------------------------------------------------------------
   Base algorithm                OID proposal
   --------------------------------------------------------------
   Message Digest 4 (MD4)        1.3.6.1.4.1.37476.3.2.1.99.1
   Message Digest 5 (MD5)        1.3.6.1.4.1.37476.3.2.1.99.2
   RIPEMD-160                    1.3.6.1.4.1.37476.3.2.1.99.3
   Secure Hash Algorithm         1.3.6.1.4.1.37476.3.2.1.99.4
   Secure Hash Algorithm 1       1.3.6.1.4.1.37476.3.2.1.99.5
   Secure Hash Algorithm 2/224   1.3.6.1.4.1.37476.3.2.1.99.6.224
   Secure Hash Algorithm 2/256   1.3.6.1.4.1.37476.3.2.1.99.6.256
   Secure Hash Algorithm 2/384   1.3.6.1.4.1.37476.3.2.1.99.6.384
   Secure Hash Algorithm 2/512   1.3.6.1.4.1.37476.3.2.1.99.6.512
   Secure Hash Algorithm 3/224   1.3.6.1.4.1.37476.3.2.1.99.7.224
   Secure Hash Algorithm 3/256   1.3.6.1.4.1.37476.3.2.1.99.7.256
   Secure Hash Algorithm 3/384   1.3.6.1.4.1.37476.3.2.1.99.7.384
   Secure Hash Algorithm 3/512   1.3.6.1.4.1.37476.3.2.1.99.7.512
   --------------------------------------------------------------
.fi

-  <iterations> is the number of iterations, e.g. 1987.

-  <salt-base64> is the iterated salt used for MHA2, encoded in Base64.

-  <hash-base64> is the resulting hash, encoded in Base64.

.ti 0
4  Test Vectors

.nf
MHA2 - Base algo 'sha1', Input '', Salt '', Iterations 0
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=0$$NKCUx/Vbzl1cuIdoIA
     WNBJapRpG
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$0$
     $PMEWz1Xd/n3ewKfqKCYPDLcrTrI=
Hex: 3cc116cf55ddfe7ddec0a7ea28260f0cb72b4eb2

MHA2 - Base algo 'sha1', Input '', Salt '', Iterations 1
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=1$$PoioZBIxVWuqt0nym5
     qyhAszLwC
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$1$
     $RqkqbDKzXYwsv2p+o7s+jCu/NyE=
Hex: 46a92a6c32b35d8c2cbf6a7ea3bb3e8c2bbf3721

MHA2 - Base algo 'sha1', Input '', Salt '', Iterations 2
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=2$$1zU5hmBQ9/ZewYq43q
     rXd2D8QRK
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$2$
     $3/W7joDSB1bgyas65stZf4FASTM=
Hex: dff5bb8e80d20756e0c9ab3ae6cb597f81404933

MHA2 - Base algo 'sha1', Input '', Salt 'salt', Iterations 0
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=0$a0Dqb8$zZjdOSIocsFG
     Qp/.hpoYQLOfiN6
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$0$
     c2FsdA==$/blfQUKqeuHISr10jrqaSNQhkP8=
Hex: fdb95f4142aa7ae1c84abd748eba9a48d42190ff

MHA2 - Base algo 'sha1', Input '', Salt 'salt', Iterations 1
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=1$a0Dqb8$BkKmNoOvKEss
     6ek6EyXArDX1Z.8
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$1$
     c2FsdA==$DmMoPqQxMGuu8gm8G+ZCtFZ3b0A=
Hex: 0e63283ea431306baef209bc1be642b456776f40

MHA2 - Base algo 'sha1', Input '', Salt 'salt', Iterations 2
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=2$a0Dqb8$8HauBcPn31A4
     EuUKUf.vcbg1K/O
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$2$
     c2FsdA==$AJcwDeRp53C6GwWMWh0xedi3M1Q=
Hex: 0097300de469e770ba1b058c5a1d3179d8b73354

MHA2 - Base algo 'sha1',
Input 'The quick brown fox jumps over the lazy dog',
Salt '', Iterations 0
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=0$$/oEBf.u/XEwY8r12lI
     lk.4wWH6m
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$0$
     $1qGDh0w1ZGyaAt34nKnm06yYJ8o=
Hex: d6a183874c35646c9a02ddf89ca9e6d3ac9827ca

MHA2 - Base algo 'sha1',
Input 'The quick brown fox jumps over the lazy dog',
Salt '', Iterations 1
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=1$$9zbRpQFxyeyoJj0keA
     dMpjXdvuK
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$1$
     $B/dTrSHz+g+qLl2mgCfOrlZfxwM=
Hex: 07f753ad21f3fa0faa2e5da68027ceae565fc703

MHA2 - Base algo 'sha1',
Input 'The quick brown fox jumps over the lazy dog',
Salt '', Iterations 2
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=2$$gGCiACHhKqZgNFztpF
     zsncKMCTS
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$2$
     $iIEkCEJjMsbiPH/vrH/upeMOEVU=
Hex: 88812408426332c6e23c7fefac7feea5e30e1155

MHA2 - Base algo 'sha1',
Input 'The quick brown fox jumps over the lazy dog',
Salt 'salt', Iterations 0
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=0$a0Dqb8$EFuadpjXUzjJ
     BNVfZHS.iQ/.dM2
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$0$
     c2FsdA==$GHwcfrlZW/lLDPXhbJU0kS10fO4=
Hex: 187c1c7eb9595bf94b0cf5e16c9534912d747cee

MHA2 - Base algo 'sha1',
Input 'The quick brown fox jumps over the lazy dog',
Salt 'salt', Iterations 1
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=1$a0Dqb8$fMnarhbJV/XF
     qzP38t7RJEdHKJ2
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$1$
     c2FsdA==$hOpctjdLX1ZHs/R5Av9TLGfJML4=
Hex: 84ea5cb6374b5f5647b3f47902ff532c67c930be

MHA2 - Base algo 'sha1',
Input 'The quick brown fox jumps over the lazy dog',
Salt 'salt', Iterations 2
MCF: $1.3.6.1.4.1.37476.3.2.1.2$a=sha1,i=2$a0Dqb8$dECLjkOyRDCv
     5W9QS4Qm3ZgXRh2
HSN: 1.3.6.1.4.1.37476.3.2.1.2$1.3.6.1.4.1.37476.3.2.1.99.5$2$
     c2FsdA==$fGENlmQ+TFEx7YBSU6So5biZTj4=
Hex: 7c610d96643e4c5131ed805253a4a8e5b8994e3e
.fi

.ti 0
5  Reference implementation

.nf
// Implementation in PHP, with hex output
define('MHA2_K',   chr(0x24).chr(0x12).chr(0x19).chr(0x87));
define('MHA2_P',   chr(0x12).chr(0x24).chr(0x19).chr(0x87));
define('MHA2_Q',   chr(0x19).chr(0x87).chr(0x12).chr(0x24));
function mha2($message, $salt, $iterations, $base_algo) {
    assert($iterations>=0);
    $a = '';
    $b = '';
    $c = '';
    for ($i=0; $i<=$iterations; $i++) { // run $iterations+1 times
        $a  = hash($base_algo,
              MHA2_P.$a.$message.$salt.MHA2_Q, true/*binary*/);
        $b  = hash($base_algo,
              MHA2_Q.$salt.$message.$b.MHA2_P, true/*binary*/);
        $c .= MHA2_K.$message.$salt;
    }
    $c = hash($base_algo, $c, true/*binary*/);
    return bin2hex($a ^ $b ^ $c);
}

// Framework for PHP, with MCF output and auto-generated salt:
// https://github.com/danielmarschall/php_utils/blob/master/
//                                                  vts_crypt.inc.php
include 'vts_crypt.inc.php';
$hash = vts_password_hash($data, PASSWORD_VTS_MHA2,
        ['algo'=>'sha1', 'salt_length'=>16, 'iterations'=>1987]);
assert(vts_password_verify($data, $hash));
.fi


.ti 0
6  Security Considerations

Hash values play a crucial role in various security contexts, such as password verification.  For detailed guidance on securely managing hashes, please consult the relevant literature or documentation.

- The output length of MHA2(i, s, x) is equal to the output length of H(z).

- MHA2(i, '', s & x) != MHA2(i, s, x) != MHA2(i, '', x & s).

- It is recommended not to use i=0.

- P, Q and K are chosen to arbitrary data . It can be chosen to a different value, but should not be empty.

- P should never be equal to Q, otherwise, A(i,s,x) could become equal to B(i,s,x).

	Possible "optimizations" (vulnerabilities) can be done if P&Q = Q&P:

		a) If i = 0 and s&x = x&s:
.br
		   => A(0, s, x) = B(0, s, x)
.br
		   => MHA2(0, s, x) = H(K&x&s)
.br
		b) If s&x='' (s='' and x=''):
.br
		   => A(i, '', '') = B(i, '', '')
.br
		   => MHA2(i, '', '') = H('')
.br
		c) If z := s&x = x&s:
.br
		   => H(s&x) = H(x&s) = H(z)
.br
		   => H(s&x) = A(0,s,x) = H(z) = B(0,s,x) = H(P&x&s&Q)
.br
			= H(Q&s&x&P)
.br
		   => in A(i,s,x) and B(i,s,x),
.br
		  this embedded value H(z) has to be calculated only once.

	Note: s&x = x&s is true if one of the following conditions is true:
.br
		x = '' or
.br
		s = '' or
.br
		x = s

- If H(x) is compromised, MHA2 (even unsalted) would be still safe.

  Examples:

.nf
i = 0, unsalted (s=''):
H(P&x&Q) = H(P&y&Q) = c
=> MHA2(0, '', x) = c xor c xor H(K&x)
                  = c xor c xor H(K&y)
                  = MHA2(0, '', y)
=> H(K&x) ?= H(K&y)

i = 1, unsalted (s=''):
H(P&x&Q) = H(P&y&Q) = c
=> MHA2(1, '', x) = H(P&c&x&Q) xor H(Q&x&c&P) xor H(K&x&K&x)
                  = H(P&c&y&Q) xor H(Q&y&c&P) xor H(K&y&K&y)
                  = MHA2(1, '', y)
=> H(P&c&x&Q) xor H(Q&x&c&P) xor H(K&x&K&x)
                 ?= H(P&c&y&Q) xor H(Q&y&c&P) xor H(K&y&K&y)

i = 2, unsalted (s=''):
H(P&x&Q) = H(P&y&Q) = c
	=> MHA2(2, '', x) = H(P&H(P&c&x&Q)&x&Q) xor
            H(Q&x&H(Q&x&c&P)&P) xor H(K&x&K&x&K&x) =
            H(P&H(P&c&y&Q)&y&Q) xor H(&Qx&H(&Qy&c&P)&P)
            xor H(K&y&K&y&K&y) = MHA2(2, '', y)
	=> H(P&H(P&c&x&Q)&x&Q) xor H(Q&x&H(Q&x&c&P)&P)
            xor H(K&x&K&x&K&x) ?= H(P&H(P&c&y&Q)&y&Q)
            xor H(Q&x&H(Q&y&c&P)&P) xor H(K&y&K&y&K&y)
.fi

- If a high value for i is chosen, the hash will be slow.
  Therefore, the creation of a rainbow table or brute force attacks will be slow (see runtime section).
  On the other hand, a brute force attack could result in a DoS if the CPU of the server is too weak.

- The salt should always be set.
  The salt should be a merge of an individual (random unique) user-specific salt, a service-specific salt and server-specific salt.
	s = userSalt & serviceSalt & serverSalt

- For the third xor argument "xor C(i,s,x)" is not required, but does probably strengten the algorithm in case that
  an attack can be found where A(i,s,x) = B(i,s,x) can be enforced.

.ti 0
6.1  Runtime complexity

The following table will show the required executions of the hash function H(z) on given number of different values of i:

.nf
	------------------
	i	H(z)-calls
	------------------
	0	3
	1	5
	2	7
	3	9
	n	2n+3
	------------------
.fi

.ti 0
7  IANA Considerations

There are no IANA Considerations.

.ti 0
8  References

.ti 0
6.1  Normative References
.in 14

.\" https://www.rfc-editor.org/refs/ref2119.txt
.ti 3
[RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate Requirement Levels", BCP\014, RFC\02119, DOI\010.17487/RFC2119, March\01997,
.br
<https://www.rfc-editor.org/info/rfc2119>.
.bp
.in 3
.ti 0
6.2  Informative References
.in 14

.ti 3
None

.in 3
.ti 0
Acknowledgements
.in 3

I would like to thank Melanie Wehowski for her long time support in OIDplus and WEID projects.

This document was written in Nroff Internet Draft Editor by 3xA Security.
.br
https://aaa-sec.com/nroffedit/
.br
https://misc.daniel-marschall.de/patches/nroffedit/ ("year 2020" patch)

.ti 0
Authors' Addresses
.in 3

.nf
Daniel Marschall
Postfach 11 53
69243 Bammental
Germany

Email: daniel-marschall@viathinksoft.de
URI:   https://www.viathinksoft.com/
.fi
